(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{382:function(t,a,e){t.exports=e.p+"assets/img/concurrentUpdateRealize-1.7bff9905.png"},469:function(t,a,e){"use strict";e.r(a);var s=e(14),n=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"实现并发更新"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现并发更新"}},[t._v("#")]),t._v(" 实现并发更新")]),t._v(" "),a("p",[t._v("要实现并发更新，需要做的改动包括：")]),t._v(" "),a("ul",[a("li",[t._v("Lane 模型增加更多优先级")]),t._v(" "),a("li",[t._v("交互与优先级对应")]),t._v(" "),a("li",[t._v("调度阶段引入 Scheduler，新增调度策略逻辑")]),t._v(" "),a("li",[t._v("render 阶段可中断")]),t._v(" "),a("li",[t._v("根据 update 计算 state 的算法需要修改")])]),t._v(" "),a("h2",{attrs:{id:"扩展交互-优先级"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#扩展交互-优先级"}},[t._v("#")]),t._v(" 扩展交互(优先级)")]),t._v(" "),a("p",[t._v("不同交互对应不同优先级，可以根据"),a("code",[t._v("触发更新的上下文环境")]),t._v("赋予不同优先级，比如：")]),t._v(" "),a("ul",[a("li",[t._v("点击事件需要同步处理")]),t._v(" "),a("li",[t._v("滚动事件优先级再低点")]),t._v(" "),a("li",[t._v("useEffect create 回调中触发更新的优先级")]),t._v(" "),a("li",[t._v("首屏渲染的优先级")]),t._v(" "),a("li",[t._v("...")])]),t._v(" "),a("p",[t._v("不同的优先级影响不同的 Update 从而影响更新（渲染）")]),t._v(" "),a("p",[t._v("不过现在掌握与优先级相关的信息包括：")]),t._v(" "),a("ul",[a("li",[t._v("Scheduler 的 5 种优先级")]),t._v(" "),a("li",[t._v("React 中的 Lane 模型")])]),t._v(" "),a("p",[t._v("也就是说，运行流程在 React 时，使用的是 Lane 模型，运行流程在 Scheduler 时，使用的是优先级。所以需要实现两者的转换：")]),t._v(" "),a("ul",[a("li",[t._v("lanesToSchedulerPriority")]),t._v(" "),a("li",[t._v("schedulerPriorityToLane")])]),t._v(" "),a("h2",{attrs:{id:"扩展调度阶段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#扩展调度阶段"}},[t._v("#")]),t._v(" 扩展调度阶段")]),t._v(" "),a("p",[t._v("主要是在同步更新（微任务调度）的基础上扩展并发更新（Scheduler调度），主要包括：")]),t._v(" "),a("ul",[a("li",[t._v("将并发原理中的调度策略移到项目中")]),t._v(" "),a("li",[t._v("render 阶段变为"),a("strong",[t._v("可中断")])])]),t._v(" "),a("p",[t._v("梳理两种典型场景：")]),t._v(" "),a("ul",[a("li",[t._v("时间切片")]),t._v(" "),a("li",[t._v("高优先级更新打断低优先级更新")])]),t._v(" "),a("img",{staticClass:"zoom-custom-imgs",attrs:{src:e(382)}}),t._v(" "),a("h2",{attrs:{id:"扩展state计算机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#扩展state计算机制"}},[t._v("#")]),t._v(" 扩展state计算机制")]),t._v(" "),a("p",[t._v("上文提到不同的 lane 影响不同的 Update 从而影响更新，而每个 Update 又会计算生成 state")]),t._v(" "),a("p",[t._v("所以，Update 计算 state 这一环节就会做一下事情：")]),t._v(" "),a("ul",[a("li",[t._v("高优先级任务打断低优先级任务时，跳过"),a("strong",[t._v("优先级不够的 Update")])]),t._v(" "),a("li",[t._v("保存跳过的 Update")])]),t._v(" "),a("h3",{attrs:{id:"跳过-update-需要考虑的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#跳过-update-需要考虑的问题"}},[t._v("#")]),t._v(" 跳过 update 需要考虑的问题")]),t._v(" "),a("p",[t._v("比较"),a("strong",[t._v("优先级是否足够")]),t._v(" => 位运算 & 计算 renderLane 和 LupdateLane")]),t._v(" "),a("p",[t._v("如何同时兼顾 "),a("strong",[t._v("update 的连续性")]),t._v("与 "),a("strong",[t._v("update 的优先级")]),t._v("？")]),t._v(" "),a("div",{staticClass:"language-jsx extra-class"},[a("pre",{pre:!0,attrs:{class:"language-jsx"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// u0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("action")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("num")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("lane")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" DefaultLane\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// u1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("action")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("lane")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" SyncLane\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// u2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("action")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("num")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("lane")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" DefaultLane\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// state = 0; updateLane = DefaultLane")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 只考虑优先级情况下的结果：11")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 只考虑连续性情况下的结果：13")]),t._v("\n")])])]),a("p",[t._v("新增 baseState、baseQueue 字段来兼顾 "),a("strong",[t._v("update 的连续性")]),t._v("与 "),a("strong",[t._v("update 的优先级")])]),t._v(" "),a("ul",[a("li",[t._v("baseState 是本次更新参与计算的初始 state，memoizedState 是上次更新计算的最终 state")]),t._v(" "),a("li",[t._v("如果本次更新没有 update 被跳过，则下次更新开始时 baseState === memoizedState")]),t._v(" "),a("li",[t._v("如果本次更新有 update 被跳过，则本次更新计算出的 memoizedState 为"),a("strong",[t._v("考虑优先级")]),t._v("情况下计算的结果，baseState 为"),a("strong",[t._v("最后一个没被跳过的 update 计算后的结果")]),t._v("，下次更新开始时 baseState !== memoizedState")]),t._v(" "),a("li",[t._v("本次更新"),a("strong",[t._v("被跳过的 update 及其后面的所有 update")]),t._v(" 都会被保存在 baseQueue 中参与下次 state 计算")]),t._v(" "),a("li",[t._v("本次更新"),a("strong",[t._v("参与计算但保存在 baseQueue 中的 update")]),t._v("，优先级会降低到 NoLane")])]),t._v(" "),a("div",{staticClass:"language-jsx extra-class"},[a("pre",{pre:!0,attrs:{class:"language-jsx"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// u0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("action")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("num")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("lane")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" DefaultLane\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// u1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("action")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("lane")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" SyncLane\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// u2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("action")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("num")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("lane")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" DefaultLane\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\n* 第一次render\n* baseState = 0; memoizedState = 0; \n* baseQueue = null; updateLane = DefaultLane;\n* 第一次render 第一次计算 \n* baseState = 1; memoizedState = 1; \n* baseQueue = null;\n* 第一次render 第二次计算 \n* baseState = 1; memoizedState = 1; \n* baseQueue = u1;\n* 第一次render 第三次计算 \n* baseState = 1; memoizedState = 11; \n* baseQueue = u1 -> u2(NoLane);\n*/")]),t._v(" \n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\n* 第二次render\n* baseState = 1; memoizedState = 11; \n* baseQueue = u1 -> u2(NoLane); updateLane = SyncLane\n* 第二次render 第一次计算 \n* baseState = 3; memoizedState = 3; \n* 第二次render 第二次计算 \n* baseState = 13; memoizedState = 13; \n*/")]),t._v(" \n")])])]),a("p",[t._v("所以：")]),t._v(" "),a("ul",[a("li",[t._v("react 分多次计算，每次计算都可以兼顾优先级，总体计算兼顾连续性")]),t._v(" "),a("li",[t._v("中间可能会产生不符合预期的中间状态（只兼顾优先级）")]),t._v(" "),a("li",[t._v("react 只能保证结果状态兼顾"),a("strong",[t._v("连续性")]),t._v("和"),a("strong",[t._v("优先级")])])]),t._v(" "),a("SideTitle",{attrs:{page:t.$page}})],1)}),[],!1,null,null,null);a.default=n.exports}}]);