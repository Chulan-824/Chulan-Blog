(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{390:function(t,s,a){t.exports=a.p+"assets/img/hooks-1.a587ec58.png"},391:function(t,s,a){t.exports=a.p+"assets/img/hooks-2.2c93f9e9.png"},475:function(t,s,a){"use strict";a.r(s);var n=a(14),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"实现hooks架构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实现hooks架构"}},[t._v("#")]),t._v(" 实现Hooks架构")]),t._v(" "),s("h2",{attrs:{id:"架构难点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#架构难点"}},[t._v("#")]),t._v(" 架构难点")]),t._v(" "),s("ol",[s("li",[t._v("hook 脱离 FC 上下文，仅仅是普通函数，如何让他拥有感知上下文环境的能力？")]),t._v(" "),s("li",[t._v("hook怎么知道当前是 mount 还是 update？")])]),t._v(" "),s("p",[t._v("针对问题1，比如如下情况：")]),t._v(" "),s("div",{staticClass:"language-jsx extra-class"},[s("pre",{pre:!0,attrs:{class:"language-jsx"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("App")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("useEffect")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 执行useState时怎么知道处在useEffect上下文？")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("useState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("针对上述两个难点，解决方案 "),s("code",[t._v("在不同上下文中调用的hook不是同一个函数")])]),t._v(" "),s("p",[t._v("不过要知道程序处于那种上下文中只有 reconciler 包中才能知道，但是我们使用 hooks 函数的时候，都是从 react 包中导入，所以这里还需要再内部实现一个 reconciler - react 包的一个数据共享层，大致如下图")]),t._v(" "),s("img",{staticClass:"zoom-custom-imgs",attrs:{src:a(390)}}),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("实现「内部数据共享层」时的注意事项")])]),t._v(" "),s("p",[t._v("以浏览器举例，Reconciler + hostConfig = ReactDOM")]),t._v(" "),s("p",[t._v("增加「内部数据共享层」，意味着Reconciler与React产生关联，进而意味着 ReactDOM 与 React 产生关联。")]),t._v(" "),s("p",[t._v("如果两个包「产生关联」，在打包时需要考虑：「两者的代码是打包在一起还是分开？」")]),t._v(" "),s("p",[t._v("如果打包在一起，意味着打包后的 ReactDOM 中会包含 React 的代码，那么ReactDOM 中会包含一个「内部数据共享层」，React 中也会包含一个「内部数据共享层」，这两者不是同一个「内部数据共享层」。")]),t._v(" "),s("p",[t._v("而我们希望两者共享数据，所以不希望 ReactDOM 中会包含 React 的代码。")]),t._v(" "),s("p",[t._v("需要再 rollup 打包配置文件中进行配置：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// script/rollup/react-dom.config.js")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" peerDependencies "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPackageJSON")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'react-dom'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("external")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("Object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("keys")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("peerDependencies"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("hook 如何知道自身数据保存在哪？")]),t._v(" "),s("div",{staticClass:"language-jsx extra-class"},[s("pre",{pre:!0,attrs:{class:"language-jsx"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("App")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 执行useState为什么能返回正确的num？")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("num"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("useState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("答案：「可以记录当前正在render的FC对应fiberNode，在fiberNode中保存hook数据」")]),t._v(" "),s("h2",{attrs:{id:"实现-hooks-的数据结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实现-hooks-的数据结构"}},[t._v("#")]),t._v(" 实现 Hooks 的数据结构")]),t._v(" "),s("p",[t._v("fiberNode 中可用的字段：")]),t._v(" "),s("ul",[s("li",[t._v("memoizedState")]),t._v(" "),s("li",[t._v("updateQueue")])]),t._v(" "),s("img",{staticClass:"zoom-custom-imgs",attrs:{src:a(391)}}),t._v(" "),s("p",[t._v("对于 FC 对应的 fiberNode，存在两层数据：")]),t._v(" "),s("ul",[s("li",[t._v("fiberNode.memoizedState 对应 Hooks 链表")]),t._v(" "),s("li",[t._v("链表中每个 hook 对应自身的数据")])]),t._v(" "),s("h2",{attrs:{id:"实现usestate"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实现usestate"}},[t._v("#")]),t._v(" 实现useState")]),t._v(" "),s("p",[t._v("包括2方面工作：")]),t._v(" "),s("ol",[s("li",[t._v("实现 mount 时 useState 的实现")]),t._v(" "),s("li",[t._v("实现 dispatch 方法，并接入现有更新流程内")])]),t._v(" "),s("SideTitle",{attrs:{page:t.$page}})],1)}),[],!1,null,null,null);s.default=e.exports}}]);